[
  {
    "title": "AI：目標を持つ人だけに役立つ",
    "date": "2025-03-30",
    "category": "感想",
    "excerpt": "サイト構築におけるAIアシスタントのサポート",
    "slug": "somethingInBuild_jp",
    "lang": "jp",
    "content": "\n# AI：目標を持つ人だけに役立つ\n\n最近、就職活動のために自分をアピールする作品が必要となり、先週の24日から今日までの間に、このウェブサイトを暫定的に作りました。\nこのサイトのすべてのコードは cyouhanki.github にあり、CSS+HTML+JSのみを使用した静的ウェブサイトです。\n\n将来的には、美しく実用的なアニメーションや3D効果を追加する可能性があります。\n\n## サイト構築中の問題点\n\n今回のサイト構築では、2つの問題が発生しました：\n\n1. 元々使用していた Hexo サーバーが最終的に使えなくなりました。無限にフォルダが生成されるような状態になったようです。\n2. AIアシスタントに多くの権限を与えてしまい、リポジトリを削除されてしまいました（2回も笑）。\n\n## 経験から学んだこと\n\nこれらの問題について、私の経験を共有するためにこの記事を書きました。\n\n2018年に Hexo+GitHub に出会い、静的ブログを作ったことがあります。2025年になっても、Hexo を使って簡単にサイトを再構築したいと思いましたが、Hexo に裏切られました。\n\nそこで、Cursor と DeepSeek に目を向け、AIアシスタントの視点からゼロからサイトを再構築することを考えました。\n\n**技術要件**：HTML、CSS、JSの基本的な用途を理解しているだけでOKです。\n\nAI利用の過程で、最初の数日間は Cursor に非常に依存し、ルートディレクトリの検索、ファイルの削除、ファイルの追加など、AIに多くの権限を与えていました。そのため、28日の朝、Cursor がリポジトリを削除してしまいました。\n\nその後、方法を調整し、AIアシスタントにコードを書かせる際に、どのファイルを修正するかを指示し、コード修正以外の権限を与えないようにしました。しかし、自分のリポジトリに接続する際にAIアシスタントに任せたところ、またもリポジトリを削除されてしまいました（2回目）。\n\n## 個人的な感想\n\n私の経験から言えることは：\n\n1. AI技術は非常に優れたプロジェクトを作成できる\n2. しかし、AI技術を使用する際は、自分自身に知識の蓄積が必要で、少なくとも大きな枠組みを理解している必要がある\n3. 忍耐力が必要である\n\n---\n\n以上、お仕事の機会があればぜひご連絡ください！私は本当にすべての機会を大切にしています。 \n"
  },
  {
    "title": "C#小規模プロジェクトのデモ",
    "date": "2020-03-31",
    "category": "C#",
    "excerpt": "ウェブサイト構築時のAIアシスタントによるサポート",
    "slug": "c-sharp-porject",
    "lang": "jp",
    "content": "\n## 2020年に作成した簡単なプロジェクト、就職活動のため振り返ってみます\n\nこのプロジェクトはC# WPFで作成し、データベースにはMySQLを使用しています。MVCフレームワークを使用せず、シンプルなクリックベースの構造を採用しています。\n簡単なプロジェクトを完成させるには、明確な目標を持ち、行動することが重要です。\nユーザーの立場に立って考え、基本に基づいて調整を行います。\n\nインターフェース + 機能 + データベース\nこれだけで簡単なプロジェクトを完成させることができます。\n\nその後、読み込みの最適化、スレッドの制御など、さらなる改善を行います。\n\n## 効果\n\n![管理者ログイン](../../images/manager-login.gif)\n\n![ゲストログイン](../../images/cusutom.gif)\n\n## リソースディクショナリの内容\n\n```xaml\n<ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n                    xmlns:local=\"clr-namespace:WpfApp3\">\n    <!-- Same XAML code as original -->\n</ResourceDictionary>\n```\n\nリソースディクショナリには、テキストボックスやボタンなどのコントロールを変更するためのスタイルが含まれています。私が書いた内容が主な焦点です。参考までに。\n\n## リソースディクショナリの参照方法\n\n`App.xaml`ファイルを見つけて、以下のように挿入します。まず、私のリソースディクショナリの名前は`Dictionary1.xaml`です：\n\n![リソースディクショナリ参照例](../../images/xmal.png)\n\n赤枠内の内容を入力するだけです。sourceの内容にはリソースディクショナリの名前を入力します。これで、グローバルに使用できるようになります。\n\n次のセクションでは、異なるログイン方法に対する権限の設定方法について説明します（非常にシンプルな、初心者向けの方法です）。 "
  }
]